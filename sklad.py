import os
import yaml
from PyQt5 import QtWidgets,QtCore

#Automaticaly update files from QT designer
if os.path.exists("skladUi.py"):
    os.remove("skladUi.py")
bashCommand = "pyuic5 -o skladUi.py skladUi.ui"
os.system(bashCommand)


from AutomateSuperPackage.AutomateSuperModule import SuperClass


#PyQT IMPORTS
from skladUi import Ui_Form as designer_UI
from PyQt5.QtSql import QSqlDatabase

class MainWindowApp(QtWidgets.QWidget):
    def __init__(self,*args, **kwargs):#args = multiple input variables, **kvargs multiple keyword variables (dictionaries, touples etc.)
    ################ INIT Function ##################
        super().__init__(*args, **kwargs)#super inherits all methods and properties from its parent  (QWIDGET classes)
        #Load UI forms creaated in QTdDesigner
        self.loadConfigData()
        self.ui = designer_UI() #UI form generated by UI designe
        self.ui.setupUi(self)
        SC = SuperClass()


        self.ui.tab_zakazky.itemClicked.connect(self.changeZakazka)

        #self.ACCES = QSqlDatabase.addDatabase("QODBC")
        #self.ACCES.setDatabaseName(
        #        "DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=D:\\sklad.accdb")
        #if self.ACCES.open(): print("opened")

        self.ACCES = SC.database.AccesDatabase
        self.ACCES.SimplyConnectByPath("sklad.accdb")

        self.ACCES.WriteQuery("SELECT * FROM sklad")
        self.sklad_data = self.ACCES.ResultFromQuery()
        self.sklad_data_header = [col_descriptor[0] for col_descriptor in self.ACCES.cursor.description]

        self.ACCES.WriteQuery("SELECT * FROM Logy")
        self.log_data = self.ACCES.ResultFromQuery()
        self.log_data_header = [col_descriptor[0] for col_descriptor in self.ACCES.cursor.description]

        self.ACCES.WriteQuery("SELECT * FROM Zakazky")
        self.zakazky_data = self.ACCES.ResultFromQuery()
        self.zakazky_data_header = [col_descriptor[0] for col_descriptor in self.ACCES.cursor.description]

        self.vybrana_zakazka = str(self.zakazky_data[0][1])
        self.ACCES.WriteQuery(f"SELECT * FROM {self.vybrana_zakazka}")
        self.zakazka_data = self.ACCES.ResultFromQuery()
        self.zakazka_data_header = [col_descriptor[0] for col_descriptor in self.ACCES.cursor.description]

        self.initGui()
        self.updateAllTables()

    def loadConfigData(self):
        with open("config.yaml") as f:    
            self.YAML = yaml.safe_load(f)
        
        self.database_path = self.YAML["DATABASE"]
        self.LOT_prefix = self.YAML["LOT"]["PREFIX"]
        self.LOT_suffix = self.YAML["LOT"]["SUFFIX"]
        self.QR_prefix = self.YAML["PRODUCT_ID"]["PREFIX"]
        self.QR_suffix = self.YAML["PRODUCT_ID"]["SUFFIX"]
        self.COUNT_prefix = self.YAML["POCET"]["PREFIX"]
        self.COUNT_suffix = self.YAML["POCET"]["SUFFIX"]
        self.YES_string = self.YAML["POTVRZOVANI"]["OKEY"]
        self.NO_string = self.YAML["POTVRZOVANI"]["CANCEL"]





    def  changeZakazka(self, item: QtWidgets.QTableWidgetItem ):
        self.vybrana_zakazka = str(self.ui.tab_zakazky.item(item.row(),1).text())
        print(self.vybrana_zakazka)
        self.ACCES.WriteQuery(f"SELECT * FROM {self.vybrana_zakazka}")
        self.zakazka_data = self.ACCES.ResultFromQuery()
        self.zakazky_data_header = [col_descriptor[0] for col_descriptor in self.ACCES.cursor.description]

        table = self.ui.tab_zakazka
        query_data = self.zakazka_data
        sklad_ref_header = ["NAZEV" ,"POPIS", "CenaZaKusKc"] 
        header =  self.zakazka_data_header + sklad_ref_header

        table.clear()
        table.setRowCount(len(query_data))
        table.setColumnCount(len(header))
        table.setHorizontalHeaderLabels(header)
        table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        table.horizontalHeader().setStyleSheet("QHeaderView::section { background-color: rgb(145,145,145); }")
        for row_number, row_data in enumerate(query_data):
            for col_number, data in enumerate(row_data):
                if table.horizontalHeaderItem(col_number).text() == "refSkladID":

                    self.ACCES.WriteQuery(f"SELECT NAZEV,POPIS, CenaZaKusKc FROM Sklad WHERE Sklad.ID = {data}")
                    refSkladID_data = self.ACCES.ResultFromQuery()
                    print(refSkladID_data)
                    self.updateNestedTable(sklad_ref_header,table, refSkladID_data,3,row_number) # 3 protože první 3 sloupce jsou ID,refSKLADID a POCET

                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                item.setFlags(QtCore.Qt.ItemIsEnabled)
                table.setItem(row_number, col_number, item)
                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                table.setItem(row_number, col_number , item)

    def updateNestedTable(self,header,table,query_data,col_offset,row_offset):
        for row_number, row_data in enumerate(query_data):
            for col_number, data in enumerate(row_data):
                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                item.setFlags(QtCore.Qt.ItemIsEnabled)
                table.setItem(row_number + row_offset, col_number+ col_offset, item)
                item = QtWidgets.QTableWidgetItem(str(data))
                print(data)
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                table.setItem(row_number + row_offset, col_number + col_offset , item)

        #self.ACCES.WriteQuery(f"SELECT ID, NAZEV, POPIS, CenaZaKus FROM Sklad WHERE ID = {refSkladID}")
        #self.zakazka_data = self.ACCES.ResultFromQuery()


        #self.updateOneTable(self.ui.tab_zakazka,self.zakazka_data, self.zakazka_data_header)

    def initGui(self):
        self.tables = [self.ui.tab_zakazka,
        self.ui.tab_log,
        self.ui.tab_sklad,
        self.ui.tab_zakazky]

    def updateOneTable(self,table:QtWidgets.QTableWidget,query_data,header):

        table.setRowCount(len(query_data))
        table.setColumnCount(len(query_data[0]))
        table.setHorizontalHeaderLabels(header)
        table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        table.horizontalHeader().setStyleSheet("QHeaderView::section { background-color: rgb(145,145,145); }")
        for row_number, row_data in enumerate(query_data):
            for col_number, data in enumerate(row_data):
                item = QtWidgets.QTableWidgetItem(str(data))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                table.setItem(row_number, col_number, item)

    def updateAllTables(self):
        #print(self.sklad_data)
        #print(self.Logy_data)
        #print(self.zakazky_data)
        #print(self.sklad_data)
        query_result = [self.zakazka_data,
                        self.log_data,
                        self.sklad_data,
                        self.zakazky_data]

        headers = [self.zakazka_data_header,
                   self.log_data_header,
                   self.sklad_data_header,
                   self.zakazky_data_header]


        for table,query_data,header in zip(self.tables,query_result, headers):
            if len(query_data) > 1:
                table.setRowCount(len(query_data))
                table.setColumnCount(len(query_data[0]))
                table.setHorizontalHeaderLabels(header)
                table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
                table.horizontalHeader().setStyleSheet("QHeaderView::section { background-color: rgb(145,145,145); }")
                for row_number, row_data in enumerate(query_data):
                    for col_number, data in enumerate(row_data):
                        item = QtWidgets.QTableWidgetItem(str(data))
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        table.setItem(row_number, col_number, item)
            



if __name__ == '__main__':
    #Read config file:

    app = QtWidgets.QApplication([])
    MainWindow = MainWindowApp()
    #MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)
    MainWindow.show() 
        # return self.currentText()
    #MainWindow.showMaximized()
    #self.showFullScreen()
    app.exec_()


